# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson


# ***************************************************************
# Global
# ***************************************************************

# ***************************************************************
# Visual mode
# ***************************************************************

'atom-text-editor.vim-mode:not(.insert-mode)':
# Editing
# -------------
  ', space': 'editor:toggle-line-comments'
  'shift-enter': 'editor:newline-above'
  'enter': 'editor:newline-below'

# Navigation
# -------------
  'ctrl-k': 'custom:move-ten-up'
  'ctrl-j': 'custom:move-ten-down'

'atom-text-editor.vim-mode:not(.insert-mode), .tree-view':
  ', n': 'tree-view:toggle-focus'
  ', t': 'tree-view:toggle'
# ***************************************************************
# Insert mode
# ***************************************************************
'atom-text-editor.vim-mode.insert-mode':
  'j j': 'vim-mode:reset-normal-mode'
